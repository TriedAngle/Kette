method: size ( sequence -- size )
method: length ( sequence -- size )
method: nth! ( n seuqence -- obj )
method: set-nth! ( obj n sequence -- )
method: in-bounds? ( n sequence -- ? )

method: check-bounds ( n sequence -- n sequence )
method: nth ( n sequence -- obj )
method: ?nth ( n sequence -- obj/f )
method: set-nth ( obj n sequence -- )
method: ?set-nth ( obj n sequence -- ? )
method: push ( value sequence -- )
method: pop ( value sequence -- )
method: push-front ( value sequence -- )
method: pop-front ( value sequence -- )
method: 1th ( seq -- val )
method: 2th ( seq -- val )
method: 3th ( seq -- val )
method: 1th<< ( val seq -- )
method: 2th<< ( val seq -- )
method: 3th<< ( val seq -- )
method: first ( seq -- val )
method: last ( seq -- val )


m: array size array-size ;
m: array length array-size ;
m: array nth! array-nth ;
m: array set-nth! set-array-nth ;
m: array in-bounds? [ drop 0 >= ] [ size < ] 2bi and ;

m: array nth 2dup in-bounds? [ nth! ] [ 2drop ] if ;
m: array ?nth 2dup in-bounds? [ nth! ] [ 2drop f ] if ;
m: array set-nth 2dup in-bounds? [ set-nth! ] [ 3drop f ] if ;
m: array 1th 0 swap nth ;
m: array 2th 1 swap nth ;
m: array 3th 2 swap nth ;
m: array 1th<< 0 swap set-nth! ;
m: array 2th<< 1 swap set-nth! ; 
m: array 3th<< 2 swap set-nth! ; 
m: array first 0 swap nth ;
m: array last [ length 1 - ] keep nth ;


type: vector length underlying ;
m: vector . underlying>> . ;
: <vector> ( size -- vector ) f <array> 0 swap vector boa ;
: array>vector ( array - vector ) [ size ] keep vector boa ;

@: V{ \ } @vm-parse-until array>vector ;

m: vector size underlying>> size ;
m: vector length length>> ;
m: vector nth! underlying>> nth! ;
m: vector set-nth! underlying>> set-nth! ;
m: vector in-bounds? [ drop 0 >= ] [ length < ] 2bi and ;

m: vector nth 2dup in-bounds? [ nth! ] [ 2drop ] if ;
m: vector ?nth 2dup in-bounds? [ nth! ] [ 2drop f ] if ;
m: vector set-nth 2dup in-bounds? [ set-nth! ] [ 2drop f ] if ;
m: vector 1th 0 swap nth ;
m: vector 2th 1 swap nth ;
m: vector 3th 2 swap nth ;
m: vector 1th<< 0 swap set-nth! ;
m: vector 2th<< 1 swap set-nth! ; 
m: vector 3th<< 2 swap set-nth! ; 
m: vector first 0 swap nth ;
m: vector last [ length 1 - ] keep nth ;

: vector-grow ( vector -- )
    dup [ underlying>> ] [ size dup 2 * f <array> ] bi
    [ swap [ 0 0 ] dip array-copy ] keep swap underlying<< ; 

: vector-shrink-minimum ( vector -- ) 
    dup [ underlying>> ] [ length dup ] bi f <array>
    [ swap [ 0 0 ] dip array-copy ] keep swap underlying<< ;

: vector-shrink ( vector -- ) 
    dup [ underlying>> ] [ length ] [ size 2 / f <array> ] bi
    [ swap [ 0 0 ] dip array-copy ] keep swap underlying<< ;

m: vector push
    dup [ length ] [ size ] bi < [ dup vector-grow ] unless
    [ length ] [ underlying>> set-nth! ] [ [ length 1 + ] [ length<< ] bi ] tri ;

m: vector pop
    dup [ length ] [ size 3 / ] < [ dup vector-shrink ] when
    [ length 1 - ] [ underlying>> set-nth! ] [ [ length 1 - ] [ length<< ] bi ] tri ;


: ?find|idx<inner ( value seq offset -- idx/f ) 
    dup 0 = not [
        1 - dup pick nth! pickd = [
            2dropd
        ] [ ?find|idx<inner ] if
    ] [ 3drop f ] if ;

: ?find|idx< ( value seq -- idx/f ) 
    dup length ?find|idx<inner ;

: ?find< ( value seq -- idx value/f )
    dup -rot ?find|idx< dup [ [ swap nth! ] keep swap ] [ 2dropd ] if ;


: ?find2|idx<inner ( key seq offset -- idx/f ) 
    dup 0 = not [
        2 - dup pick nth! pickd = [
            2dropd
        ] [ ?find2|idx<inner ] if
    ] [ 3drop f ] if ;

: ?find2|idx< ( key seq -- idx/f ) 
    dup length ?find2|idx<inner ;

: ?find2< ( key seq -- idx value/f )
    dup -rot ?find2|idx< dup [ [ 1 + swap nth! ] keep swap ] [ dropd 1 neg swap ] if ;

: reset-namestack ( -- ) 
    100 <vector> let-me-cook name-stack<< ;

$[ reset-namestack t ]

: define-symbol ( word -- sym ) 
    dup let-me-cook name-stack>> ?find2|idx< dup [
        2drop
    ] [ 
        drop dup word-self-push dup
        let-me-cook name-stack>> [ push ] keep f swap push 
    ] if ; 


: var@ ( variable -- value )
    unbox let-me-cook name-stack>> ?find2|idx< dup [
        1 + let-me-cook name-stack>> nth!
    ] [ drop f ] if ; !/ TODO: ERROR HERE !/

: var! ( value variable -- )
    unbox let-me-cook name-stack>> ?find2|idx< dup [
        1 + let-me-cook name-stack>> set-nth!
    ] [ 2drop f ] if ; !/ TODO: ERROR HERE !/

@: sym: 
    @vm-next-token @vm-define-empty-global-word define-symbol drop t ;

$[
    sym: dictionary
    sym: last-word
    sym: active-vocabulary
    sym: active-parser
t ]

: reset-dictionary ( -- )
    100 <vector> dictionary var! ;

$[ reset-dictionary t ]

type: vocabulary name words dependencies dependency-names ;
: <vocabulary> ( name -- vocabulary ) 10 <vector> 10 <vector> 10 <vector> vocabulary boa ;

: lookup-vocabulary ( name vocabulary -- idx word/f )
    words>> ?find2< ;

@: vocab: 
    @vm-next-token dup dictionary var@ ?find2< dropd dup [
        dropd active-vocabulary var!
    ] [
        drop [ <vocabulary> dup active-vocabulary var! ] keep
        dictionary var@ [ push ] keep push
    ] if t ;


: lookup-current-vocabulary ( name -- idx word/f ) 
    active-vocabulary var@ lookup-vocabulary ;

: new-empty-word-in-vocabulary ( name vocabulary -- word ) 
    words>> swap dup <empty-word> [ swap pick push over push drop ] keep ;

: word-in-current-vocabulary ( name -- word ) 
    dup lookup-current-vocabulary dropd dup [ dropd ] [ 
        drop active-vocabulary var@ new-empty-word-in-vocabulary
    ] if ;


type: parser text line column parsing-words ;

: <parser> ( text -- ) 1 0 50 <vector> parser boa ;

: parser|next-line ( parser -- ) dup line>> 1 + swap line<< ;


!/ name -- 
@: : @vm-next-token \ ; @vm-parse-until array>quotation ;
!/

