method: size ( sequence -- size )
method: length ( sequence -- size )
method: nth! ( n seuqence -- obj )
method: set-nth! ( obj n sequence -- )
method: in-bounds? ( n sequence -- ? )

method: check-bounds ( n sequence -- n sequence )
method: nth ( n sequence -- obj )
method: ?nth ( n sequence -- obj/f )
method: set-nth ( obj n sequence -- )
method: ?set-nth ( obj n sequence -- ? )
method: push ( value sequence -- )
method: pop ( value sequence -- )
method: push-front ( value sequence -- )
method: pop-front ( value sequence -- )
method: 1th ( seq -- val )
method: 2th ( seq -- val )
method: 3th ( seq -- val )
method: 1th<< ( val seq -- )
method: 2th<< ( val seq -- )
method: 3th<< ( val seq -- )
method: first ( seq -- val )
method: last ( seq -- val )


m: array size array-size ;
m: array length array-size ;
m: array nth! array-nth ;
m: array set-nth! set-array-nth ;
m: array in-bounds? [ drop 0 >= ] [ size < ] 2bi and ;

m: array nth 2dup in-bounds? [ nth! ] [ 2drop ] if ;
m: array ?nth 2dup in-bounds? [ nth! ] [ 2drop f ] if ;
m: array set-nth 2dup in-bounds? [ set-nth! ] [ 3drop f ] if ;
m: array 1th 0 swap nth ;
m: array 2th 1 swap nth ;
m: array 3th 2 swap nth ;
m: array 1th<< 0 swap set-nth! ;
m: array 2th<< 1 swap set-nth! ; 
m: array 3th<< 2 swap set-nth! ; 
m: array first 0 swap nth ;
m: array last [ length 1 - ] keep nth ;


type: vector length underlying ;
m: vector . underlying>> . ;
: <vector> ( size -- vector ) f <array> 0 swap vector boa ;
: array>vector ( array - vector ) [ size ] keep vector boa ;

@: V{ \ } @vm-parse-until array>vector ;

m: vector size underlying>> size ;
m: vector length length>> ;
m: vector nth! underlying>> nth! ;
m: vector set-nth! underlying>> set-nth! ;
m: vector in-bounds? [ drop 0 >= ] [ length < ] 2bi and ;

m: vector nth 2dup in-bounds? [ nth! ] [ 2drop ] if ;
m: vector ?nth 2dup in-bounds? [ nth! ] [ 2drop f ] if ;
m: vector set-nth 2dup in-bounds? [ set-nth! ] [ 2drop f ] if ;
m: vector 1th 0 swap nth ;
m: vector 2th 1 swap nth ;
m: vector 3th 2 swap nth ;
m: vector 1th<< 0 swap set-nth! ;
m: vector 2th<< 1 swap set-nth! ; 
m: vector 3th<< 2 swap set-nth! ; 
m: vector first 0 swap nth ;
m: vector last [ length 1 - ] keep nth ;

: vector-grow ( vector -- )
    dup [ underlying>> ] [ size dup 2 * f <array> ] bi
    [ swap [ 0 0 ] dip array-copy ] keep swap underlying<< ; 

: vector-shrink-minimum ( vector -- ) 
    dup [ underlying>> ] [ length dup ] bi f <array>
    [ swap [ 0 0 ] dip array-copy ] keep swap underlying<< ;

: vector-shrink ( vector -- ) 
    dup [ underlying>> ] [ length ] [ size 2 / f <array> ] bi
    [ swap [ 0 0 ] dip array-copy ] keep swap underlying<< ;

m: vector push
    dup [ length ] [ size ] bi < [ dup vector-grow ] unless
    [ length ] [ underlying>> set-nth! ] [ [ length 1 + ] [ length<< ] bi ] tri ;

m: vector pop
    dup [ length ] [ size 3 / ] < [ dup vector-shrink ] when
    [ length 1 - ] [ underlying>> set-nth! ] [ [ length 1 - ] [ length<< ] bi ] tri ;


: ?find2|idx<inner ( key seq offset -- idx/f ) 
    dup 0 = not [
        2 - dup pick nth! pickd = [
            2dropd
        ] [ ?find2|idx<inner ] if
    ] [ 3drop f ] if ;

: ?find2|idx< ( key seq -- idx/f ) 
    dup length ?find2|idx<inner ;

: ?find2< ( key seq -- value/f )
    dup -rot ?find2|idx< dup [ 1 + swap nth! ] [ 2dropd ] if ;

: init-namestack ( -- ) 
    100 <vector> let-me-cook name-stack<< ;

init-namestack


: define-symbol ( word -- sym ) 
    dup let-me-cook name-stack>> ?find2|idx< dup [
        2drop
    ] [ 
        drop dup word-self-push dup
        let-me-cook name-stack>> [ push ] keep f swap push 
    ] if ; 


: var@ ( variable -- value )
    unbox let-me-cook name-stack>> ?find2|idx< dup [
        1 + let-me-cook name-stack>> nth!
    ] [ drop f ] if ; !/ TODO: ERROR HERE !/

: var! ( value variable -- )
    unbox let-me-cook name-stack>> ?find2|idx< dup [
        1 + let-me-cook name-stack>> set-nth!
    ] [ 2drop f ] if ; !/ TODO: ERROR HERE !/

@: sym: @vm-next-token @vm-define-empty-global-word define-symbol drop t ;

type: vocabulary name words ;
: <vocabulary> ( name -- vocabulary ) 10 <vector> vocabulary boa ;


type: range start length step ;
: <range> ( a b step -- range ) 
    [ over - ] dip [ / 1 + ] keep range boa ;

m: range size length>> ;
m: range length length>> ;
m: range nth! [ step>> * ] [ start>> ] bi + ;
m: range in-bounds? [ drop 0 >= ] [ length < ] 2bi and ;
m: range nth 2dup in-bounds? [ nth! ] [ 2drop ] if ;
m: range ?nth 2dup in-bounds? [ nth! ] [ 2drop f ] if ;


: a..b ( a b -- a b step ) 2dup < [ 1 ] [ 1 neg ] if ;
: ..b) ( a b step -- a' b' step ) [ - ] keep ;
: (a.. ( a b step -- a' b' step ) [ swap [ + ] dip ] keep ;

: [a..b] ( a b -- range ) a..b <range> ;
: [a..b) ( a b -- range ) a..b ..b) <range> ;
: (a..b] ( a b -- range ) a..b (a.. <range> ;
: (a..b) ( a b -- range ) a..b (a.. ..b) <range> ;
: [0..b] ( b -- range ) 0 swap [a..b] ;
: [1..b] ( b -- range ) 1 swap [a..b] ;
: [0..b) ( b -- range ) 0 swap [a..b) ;
: [1..b) ( b -- range ) 1 swap [a..b) ;

type: iterator seq n ;
: <iterator> ( seq -- iterator ) 0 iterator boa ;
: iterator-increment-offset ( iterator -- ) [ n>> 1 + ] [ n<< ] bi ; 
: iterator-current ( iterator -- e/f ) [ n>> ] [ seq>> ] bi ?nth ;

: ?next ( iterator -- e/f ) 
    dup iterator-current dup [ swap iterator-increment-offset ] [ dropd ] if ;


: filter-step ( output element q -- ) dupd call [ swap push ] [ 2drop ] if ;

: filter-inner ( output q iterator -- output ) 
    dup ?next dup [
        -rot [ 3dup filter-step dropd ] dip 
        filter-inner
    ] [ 3drop ] if ;

: filter ( sequence q -- filtered ) 
    10 <vector> spin <iterator> filter-inner dup vector-shrink-minimum ;


: map-step ( output element q -- ) call swap push ;

: map-inner ( output q iterator -- output )
    dup ?next dup [
        -rot [ 3dup map-step dropd ] dip 
        map-inner
    ] [ 3drop ] if ;

: map ( sequence q -- mapped ) 
    [ dup size <vector> ] dip rot <iterator> map-inner dup vector-shrink-minimum ;

: each-inner ( q iterator -- )
    dup ?next dup [
        [ dropd swap call ] 3keep drop
        each-inner
    ] [ 3drop ] if ;

: each ( sequence q -- ) 
    swap <iterator> each-inner ;

m: range . [ ] map underlying>> . ;


: zip-inner ( output i1 i2 -- output ) 
    2dup [ ?next ] bi@ dup [
        2array pickd swap push
        zip-inner
    ] [ 4drop ] if ;

: zip ( seq1 seq2 -- seq { e1 e2 } ) 
    2dup [ length ] bi@ = [
        dup length <vector> -rot [ <iterator> ] bi@ zip-inner
    ] [ 2drop s" sequences not same size" . ] if ;


: enumerate ( sequence -- enumerated ) 
    dup length [0..b) swap zip ;


: explode ( sequence -- ..length(seq) ) 
    dup array? [ [ ] each ] [ dup map>> 2drop s" TODO: implement explode" . ] if ;

: match-test ( ? p? -- ? ?c ) keep swap ;

: match-inner-step ( ? { p? q } -- matched? ) 
    [ 1th ] [ 2th ] bi [ match-test ] dip
    swap [ call t ] [ 2drop f ] if ;

: match-inner ( ? interator: { p? q } ) 
    dup ?next dup [
        [ dropd match-inner-step ] 3keep drop
        rot [ 2drop ] [ match-inner ] if
    ] [ 2drop ] if ; !/ TODO: this should error !/

: match ( ? seq: { p? q } -- )
    <iterator> match-inner ;


: inherit-slots-from-map ( child parent -- ) 
    slots>> [ 1 slot SLOT_DATA = ] filter 
    [ [ [ push-map-slot ] [ 1 slot 1 + ] [ 1 set-slot ] tri ] curry ] dip swap each ;

: inherit-link-parent ( child parent -- )
    create-parent-slot swap push-map-slot ;

: inherit-from-map ( child parent -- )
    [ inherit-link-parent ] [ inherit-slots-from-map ] 2bi ;

: parse|slot-name>slot ( idx name -- slot ) ;
: parse|slot-desc>slot ( idx desc -- slot ) ;

: define-slot-accessor ( slot idx -- slot ) ;

!/ ( offset -- array ) - [ array [ ] ]  !/
: parse|descs>slots ( offset slots-raw -- slots: { slot accessor } ) 
    enumerate [ 
        explode [ over + ] dip
        dup 2th array? [ parse|slot-desc>slot ] [ parse|slot-name>slot ] if
        [ dupd 1th define-slot-accessor ] 2bi 2array
    ] map dropd ;


: define-object-slots ( map array -- )
    parse|descs>slots ;


@: type-new:
    scan-new-map [ define-type-words ] keep 
    @vm-peek-next-token s" <" bytearray= 
    [ @vm-next-token drop @vm-next-token @vm-link-map dupd inherit-from-map ] when 
    \ ; @vm-skip-until define-object-slots t ;

!/