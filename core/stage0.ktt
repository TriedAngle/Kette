@: \s @read-next (array-resize-push) ;
@: s" \s " @skip-1whitespace @read-until (array-resize-push) ;

@: [ s" ]" @parse-until array>quotation (array-resize-push) ;

@: { s" }" @parse-until (array-resize-push) ;

@: : 
    @read-next s" )" @read-until drop
    f f s" ;" @parse-until array>quotation 
    9 (special) (new-boa) f namestack|insert 2drop ;

: CHAR_NEWLINE ( -- char ) 2 <bytearray> dup 10 swap 0 set-u8 ;

@: // CHAR_NEWLINE @read-until drop ;
@: /* s" */" @read-until drop ;

: dip ( x q -- x ) swap >r (call) r> ;
: keep ( x q -- x ) over [ (call) ] dip ;

: bi ( x p q -- ) [ keep ] dip (call) ;
: bi* ( x y p q -- ) [ dip ] dip (call) ;
: bi@ ( x y p -- ) dup bi* ;

: array-index ( n -- idx ) 2 fixnum+ ;
: array-nth ( array n -- ) array-index slot ;
: array-set-nth ( x array n -- ) array-index set-slot ;
: (1array) ( x arr -- arr ) [ 0 array-set-nth ] keep [ 1 swap 0 set-slot ] keep ;
: (2array) ( x y arr -- arr ) [ 1 array-set-nth ] keep [ (1array) 2 swap 0 set-slot ] keep ;
: (3array) ( x y z arr -- arr ) [ 2 array-set-nth ] keep [  (2array) 3 swap 0 set-slot ] keep ;
: (4array) ( x y z w arr -- arr ) [ 3 array-set-nth ] keep [ (3array) 4 swap 0 set-slot ] keep ;
: 1array ( x -- arr ) 1 <array> (1array) ;
: 2array ( x y -- arr ) 2 <array> (2array) ;
: 3array ( x y z -- arr ) 3 <array> (3array) ;
: 4array ( x y z w -- arr ) 4 <array> (4array) ;

: word|tags-null? ( word -- ? ) 2 slot [ f ] [ t ] if ;
: word|init-tags ( word -- ) 10 <array> swap 2 set-slot ; 
: word|?init-tags ( word -- ) dup word|tags-null? [ word|init-tags ] [ drop ] if ;
: word|body ( word -- body ) 3 slot ;
: word|set-body ( body word -- ) 3 set-slot ;
: word|add-tag ( word tag -- ) 
    swap [ word|?init-tags ] keep 
    2 slot swap (array-resize-push) drop ;

: word|map ( -- map ) 9 (special) ;
: box|map ( -- map ) 11 (special) ;
: fixnum|map ( -- map ) 4 (special) ;

: new-empty-word ( name -- word ) f 10 <array> f word|map (new-boa) ;

: define-word ( name -- word ) 
    new-empty-word [ f namestack|insert 2drop ] keep ;

: scan-new-word ( -- word ) @read-next define-word ;

: ignore-stack-effect ( -- ) s" )" @read-until drop ;
: parse-word-body ( -- quot ) s" ;" @parse-until array>quotation ;


: >box ( value -- box ) box|map (new-boa) ;
: unbox ( box -- value ) 0 slot ;

: parser-tag ( -- tag ) 13 (special) ;
: inline-tag ( -- tag ) 14 (special) ;
: method-tag ( -- tag ) 15 (special) ;

: make-inline ( word -- ) inline-tag word|add-tag ; 
: make-parser ( word -- ) parser-tag word|add-tag ; 
: make-method ( word -- ) method-tag word|add-tag ;

: make-push-word ( word item -- ) 
    1array array>quotation swap [ word|set-body ] keep make-inline ;

: make-symbol ( word -- ) dup >box make-push-word ;

@: $: scan-new-word make-symbol ;
: get ( symbol -- value ) unbox namestack|find dropd ;
: set ( value symbol -- ) unbox swap namestack|insert 2drop ;

$: last-word

@: : 
    scan-new-word [ last-word set ] keep ignore-stack-effect 
    parse-word-body swap word|set-body ;

@: inline last-word get make-inline ;

$: TODO-LIST

: ?setup-todos ( -- ) TODO-LIST get [ ] [ 10 <array> TODO-LIST set ] if ; 
@: TODO: 
    s" ;" @read-until ?setup-todos 
    TODO-LIST get swap (array-resize-push) TODO-LIST set ;

TODO: lmaooo ;
: map|map ( -- map ) 0 (special) ; inline
: fixnum|map ( -- map ) 4 (special) ; inline
: array|map ( -- map ) 5 (special) ; inline
: map-slot|map ( -- map ) 7 (special) ; inline

: array? ( obj -- ? ) obj>map array|map ref-eq? ;

: parser-tag ( -- tag ) 13 (special) ;

: 4drop ( x y z w -- ) 3drop drop ; inline

: 2dip ( x y q -- x y ) swap [ dip ] dip ; inline
: 3dip ( x y z q -- x y z ) swap [ 2dip ] dip ; inline
: 4dip ( x y z w q -- x y z w ) swap [ 3dip ] dip ; inline

: 2keep ( ..a x y q -- ..b x y ) [ 2dup ] dip 2dip ; inline
: 3keep ( ..a x y z q -- ..b x y z ) [ 3dup ] dip 3dip ; inline
: 4keep ( ..a x y z w q -- ..b x y z w ) [ 4dup ] dip 4dip ; inline

: 2bi ( x y p q -- ) [ 2keep ] dip (call) ; inline
: 2bi* ( a b x y p q -- ) [ 2dip ] dip (call) ; inline
: 2bi@ ( a b x y p -- ) dup 2bi* ; inline

: tri ( x p q r -- ) [ [ keep ] dip keep ] dip (call) ; inline
: tri* ( x y z p q r -- ) [ [ 2dip ] dip dip ] dip (call) ; inline
: tri@ ( x y z p -- ) dup dup tri* ; inline

: rotd ( x y z w -- y z x w ) [ rot ] dip ; inline
: -rotd ( x y z w -- z x y w ) [ -rot ] dip ; inline

: roll ( w x y z -- x y z w ) rotd swap ; inline
: -roll ( x y z w -- w x y z ) swap -rotd ; inline

: 2swap ( a b x y -- x y a b ) roll roll ; inline

: parse-word? ( name -- word/f ) 
    namestack|find swap dup [ dropd ] [ 2drop f ] if ;

@: \ @read-next parse-word? 
    dup [ >box (array-resize-push) ] [ drop s" word not found" panic ] if ;

: is-parsing? ( word -- ? ) parser-tag has-tag? ;
: is-word? ( obj -- ? ) obj>map word|map ref-eq? ; 
    

: merge|size&offset ( src dst -- size offset ) 
    swap [ swap [ 0 slot ] bi@ fixnum+ ] keep 0 slot ;

: bytearray-copy-full ( src dst dst-offset -- ) 
    pick 0 slot 0 -rot copy-bytearray ;

: bytearray<|> ( b1 b2 -- b1b2 ) 
    2dup merge|size&offset [ swapd resize-bytearray ] dip
    swap [ swap bytearray-copy-full ] keep ;

// takes null terminator into account
: bytearray-utf8<|> ( s1 s2 -- s1s2 ) 
    2dup merge|size&offset [ 1 fixnum- ] bi@ [ swapd resize-bytearray ] dip
    swap [ swap bytearray-copy-full ] keep ;

: array-copy-full ( src dst dst-offset -- ) pick 0 slot 0 -rot copy-array ;

: array<|> ( a1 a2 -- a1a2 ) 
    2dup merge|size&offset [ 
        swapd [ resize-array dup ] [ swap 0 set-slot ] bi 
    ] dip swap [ swap array-copy-full ] keep ;

TODO: add inline tco ;
: loop ( ... p -- ... )
    [ (call) ] keep swap [ loop ] [ drop ] if ; 

TODO: add inline tco ;
: while ( ... p q -- ... )
    [ [ (call) ] keep ] dip rot
    [ swap [ [ (call) ] keep ] dip swap while ] [ 2drop ] if ;

: map-apply ( q src idx -- mapped ) 
    array-nth swap (call) ; inline

: map ( ..a arr q -- ..a new ) 
    swap dup [ dup 0 slot resize-array ] [ 0 slot ] bi 
    0 swap [ 2dup fixnum< ] [ [ [ 
        [ swap [ map-apply ] dip ] keep array-set-nth
    ] 4keep 1 fixnum+ ] dip ] while rot [ 4drop ] dip ; inline

: enumerate ( arr -- arr ) 
    dup [ dup 0 slot resize-array ] [ 0 slot ] bi 
    0 swap [ 2dup fixnum< ] [ [ [ [ 
            [ swapd array-nth ] keep 2array 
        ] keep swapd array-set-nth
    ] 3keep 1 fixnum+ ] dip ] while roll 3drop ; inline

: each-apply ( q arr idx -- ) 
    array-nth swap (call) ; inline

: each ( ..a arr q -- )
    swap dup 0 slot 0 swap [ 2dup fixnum< ] [ [
        [ each-apply ] 3keep 1 fixnum+ ] dip
    ] while 4drop ; inline


: zip-apply ( arr1 arr2 idx -- zipped ) 
    dup swapd [ array-nth ] 2bi@ 2array ;

: zip ( arr1 arr2 -- new )
    2dup [ 0 slot ] bi@ fixnum-min 
    2dup resize-array 0 rot [ 2dup fixnum< ] [ [ [
        [ swap [ zip-apply ] dip ] keep array-set-nth
    ] 4keep 1 fixnum+ ] dip ] while 2drop [ 2drop ] dip ;

: first2 ( arr -- first second ) [ 0 array-nth ] [ 1 array-nth ] bi ; inline
: first3 ( arr -- first second third )
    [ 0 array-nth ] [ 1 array-nth ] [ 2 array-nth ] tri ; inline


/*
{   \ dip \ keep \ bi \ bi* \ bi@ \ >box \ unbox \ get \ set
    \ array-index \ array-nth \ array-set-nth 
    \ (1array) \ (2array) \ (3array) \ (4array) 
    \ 1array  \ 2array \ 3array \ 4array
    \ CHAR_NEWLINE
    \ new-empty-word \ define-word \ scan-new-word \ ignore-stack-effect
    \ scan-new-word \ parse-word-body \ inline-tag \ make-inline
    \ make-push-word \ make-symbol
} dup [ unbox make-inline ] each [ unbox @force-recompile ] each

TODO: inspect why this is necessary ;
{ \ : \ $: \ // \ TODO: \ /* } [ unbox @force-recompile ] each
*/


: make-constant ( word obj -- ) make-push-word ; inline

@: const: scan-new-word @parse-next make-constant  ;
@: const!: @read-next define-word @parse-next (call) make-constant ;

const: SLOT_DATA_CONST 0
const: SLOT_DATA 1
const: SLOT_METHOD 2

: new-const-data-slot ( name value default -- map-slot ) 
    SLOT_DATA_CONST -rot map-slot|map (new-boa) ; 

: new-data-slot ( name value default -- map-slot ) 
    SLOT_DATA -rot map-slot|map (new-boa) ; 

: new-method-slot ( method -- map-slot )
    [ 0 slot SLOT_METHOD ] keep f map-slot|map (new-boa) ;

: new-basic-data-slot ( name idx -- slot ) f new-data-slot ;


// read accessors

TODO: effect ;
: read-accessor-name ( name -- accessor-name ) s" >>" bytearray-utf8<|> ;

: read-accessor-method-body ( idx -- body ) 
    \ self unbox swap \ slot unbox 3array array>quotation ;

: new-read-accessor-method ( name idx -- method )
    [ f 10 <array> ] dip read-accessor-method-body 
    word|map (new-boa) ;

: new-read-accessor-word ( name -- word )
    new-empty-word 
    dup >box \ unbox unbox \ send-self unbox 3array
    array>quotation swap [ 3 set-slot ] keep ;

: new-read-accessor ( name idx -- method word ) 
    [ read-accessor-name ] dip 
    [ new-read-accessor-method ] [ drop new-read-accessor-word ] 2bi ;

: define-read-accessor ( name idx -- method-slot ) 
    new-read-accessor [ new-method-slot ] dip f namestack|insert 2drop ;

: define-read-accessors ( data-slots -- read-slots )
    [ [ 0 slot ] [ 2 slot ] bi define-read-accessor ] map ;

// write accessors

TODO: effect ;
: write-accessor-name (name -- accessor-name ) s" <<" bytearray-utf8<|> ;

: write-accessor-method-body ( idx -- body )
    \ self unbox swap \ set-slot unbox 3array array>quotation ;

: new-write-accessor-method ( name idx -- method ) 
    [ f 10 <array> ] dip write-accessor-method-body
    word|map (new-boa) ;

: new-write-accessor-word ( name -- word )
    new-empty-word
    dup >box \ unbox unbox \ send-self unbox 3array
    array>quotation swap [ 3 set-slot ] keep ;

: new-write-accessor ( name idx -- method word )
    [ write-accessor-name ] dip
    [ new-write-accessor-method ] [ drop new-write-accessor-word ] 2bi ;

: define-write-helper ( name word -- ) 
    [ s" >>" swap bytearray-utf8<|> new-empty-word ] dip
    \ over unbox swap 2array array>quotation 
    swap [ 3 set-slot ] keep f namestack|insert 2drop ;

: define-write-accessor ( name idx -- method-slot ) 
    swap [ swap new-write-accessor ] keep over define-write-helper
    [ new-method-slot ] dip f namestack|insert 2drop ;

: define-write-accessors ( data-slots -- write-slots )
    [ [ 0 slot ] [ 2 slot ] bi define-write-accessor ] map ;

: parse-basic-slots ( -- arr )  
    10 <array> @read-next dup [ \s ; bytearray= not ] [
        dupd (array-resize-push) drop
        @read-next dup
    ] while drop ;

: push-slot ( map slot -- ) 
    swap [ 2 slot swap (array-resize-push) ] keep 2 set-slot ;


: method-body ( word -- body )
    >box \ unbox unbox \ send-self unbox 3array array>quotation ;

: (method) ( word -- ) 
    [ method-body ] keep word|set-body ;

@: method: 
    @read-next define-word /* dup make-method */ @read-next drop ignore-stack-effect (method) ;

@: method!:
    @read-next define-word /* dup make-method */ @read-next drop ignore-stack-effect 
    s" ;" @parse-until array>quotation swap word|set-body ;

// TODO: check if word and defined as method word
: parse-method ( -- method-word ) 
    @parse-next 0 slot f 10 <array>  
    s" ;" @parse-until array>quotation 
    word|map  (new-boa) ;

: define-map-method ( map method -- )
    new-method-slot push-slot ;

: (method-parser) ( map -- ) 
    parse-method define-map-method ;

: map-word-name ( map-name -- name ) s" #" swap bytearray-utf8<|> ;

: define-method-member-syntax ( map -- ) 
    dup 0 slot map-word-name s" :" bytearray-utf8<|> define-word
    [ make-parser ] keep 
    swap \ (method-parser) unbox 2array array>quotation
    swap word|set-body ; 

: new-empty-map ( name -- map ) f f f map|map (new-boa) ; inline

: print-wall ( -- ) s" -----" (println) ;

: println ( str -- ) (println) ;
: print ( str -- ) (print) ;

: body>> ( obj -- val ) 3 slot ;
: value>> (obj -- val ) 2 slot ;

: new-boa ( ... map -- obj ) (new-boa) ; inline

@: type:
    @read-next [ map-word-name define-word ] [ new-empty-map ] bi 
    [ make-push-word ] keep 
    [ define-method-member-syntax ] keep 
    parse-basic-slots
    enumerate [ first2 new-basic-data-slot ] map 
    [ 0 slot over 1 set-slot ]
    [ dup [ define-read-accessors array<|> ] [ define-write-accessors array<|> ] bi ] bi
    swap 2 set-slot  ;

@: @builtin: 
    @read-next map-word-name namestack|delete 
    s" ;" @read-until drop swap define-word 
    swap dup define-method-member-syntax make-push-word ; 

@builtin: object ;
@builtin: fixnum ;
@builtin: true ;
@builtin: false ;
@builtin: array { length #fixnum } { capacity #fixnum } ;
@builtin: bytearray { size #fixnum } ;
@builtin: quotation
    { effect #stack-effect }
    { body #array } ;
@builtin: word 
    { name #bytearray }
    { effect #stack-effect } 
    { tags #array }
    { body #quotation } ;
@builtin: slot
    { name #bytearray }
    { kind #fixnum }
    { value #object } 
    { default #object } ;
@builtin: map 
    { name #bytearray } 
    { data-slots #fixnum }
    { slots #array }
    { prototype #object } ;


method!: + ( other self -- new ) 2dup 2fixnum? [ fixnum+ ] [ \ + send-self ] if ;
method!: * ( other self -- new ) 2dup 2fixnum? [ fixnum* ] [ \ * send-self ] if ;

#fixnum: + self fixnum+ ;

// type: context data retain name call ;

TODO: we could do an `nth` dispatch by putting `self` as a special stack effect? ;
method: call ( self -- )

// TODO: optimize this ;
// x [ ... ] swap >r call r>
// x r> [ ... ] call r>
// x >r ... r>
: dip ( x q -- x ) swap >r call r> ;
// x [ ... ] over [ call ] dip
// x [ ... ] x [ call ] dip
// x dup >r [ ... ] call r>
// x dup >r ... r>
: keep ( x q -- x ) over [ call ] dip ;

// x [ ..1 ] [ ..2 ] bi
// x dup >r [ ..1 ] call r> [ ..2 ] call
// x dup r> ..1 r> ..2
: bi ( x p q -- ) [ keep ] dip call ;

: bi* ( x y p q -- ) [ dip ] dip call ;
: bi@ ( x y p -- ) dup bi* ;
: 2dip ( x y q -- x y ) swap [ dip ] dip ; inline
: 3dip ( x y z q -- x y z ) swap [ 2dip ] dip ; inline
: 4dip ( x y z w q -- x y z w ) swap [ 3dip ] dip ; inline

: 2keep ( ..a x y q -- ..b x y ) [ 2dup ] dip 2dip ; inline
: 3keep ( ..a x y z q -- ..b x y z ) [ 3dup ] dip 3dip ; inline
: 4keep ( ..a x y z w q -- ..b x y z w ) [ 4dup ] dip 4dip ; inline

: 2bi ( x y p q -- ) [ 2keep ] dip call ; inline
: 2bi* ( a b x y p q -- ) [ 2dip ] dip call ; inline
: 2bi@ ( a b x y p -- ) dup 2bi* ; inline

: tri ( x p q r -- ) [ [ keep ] dip keep ] dip call ; inline
: tri* ( x y z p q r -- ) [ [ 2dip ] dip dip ] dip call ; inline
: tri@ ( x y z p -- ) dup dup tri* ; inline

: rotd ( x y z w -- y z x w ) [ rot ] dip ; inline
: -rotd ( x y z w -- z x y w ) [ -rot ] dip ; inline

: roll ( w x y z -- x y z w ) rotd swap ; inline
: -roll ( x y z w -- w x y z ) swap -rotd ; inline

: 2swap ( a b x y -- x y a b ) roll roll ; inline

: loop ( ... p -- ... )
    [ call ] keep swap [ loop ] [ drop ] if ; 

TODO: add inline tco ;
: while ( ... p q -- ... )
    [ [ call ] keep ] dip rot
    [ swap [ [ call ] keep ] dip swap while ] [ 2drop ] if ;

: map-apply ( q src idx -- mapped ) 
    array-nth swap call ; inline

: map ( ..a arr q -- ..a new ) 
    swap dup [ dup 0 slot resize-array ] [ 0 slot ] bi 
    0 swap [ 2dup fixnum< ] [ [ [ 
        [ swap [ map-apply ] dip ] keep array-set-nth
    ] 4keep 1 fixnum+ ] dip ] while rot [ 4drop ] dip ; inline

: enumerate ( arr -- arr ) 
    dup [ dup 0 slot resize-array ] [ 0 slot ] bi 
    0 swap [ 2dup fixnum< ] [ [ [ [ 
            [ swapd array-nth ] keep 2array 
        ] keep swapd array-set-nth
    ] 3keep 1 fixnum+ ] dip ] while roll 3drop ; inline

: each-apply ( q arr idx -- ) 
    array-nth swap call ; inline

: each ( ..a arr q -- )
    swap dup 0 slot 0 swap [ 2dup fixnum< ] [ [
        [ each-apply ] 3keep 1 fixnum+ ] dip
    ] while 4drop ; inline


: zip-apply ( arr1 arr2 idx -- zipped ) 
    dup swapd [ array-nth ] 2bi@ 2array ;

: zip ( arr1 arr2 -- new )
    2dup [ 0 slot ] bi@ fixnum-min 
    2dup resize-array 0 rot [ 2dup fixnum< ] [ [ [
        [ swap [ zip-apply ] dip ] keep array-set-nth
    ] 4keep 1 fixnum+ ] dip ] while 2drop [ 2drop ] dip ;

: string<|> ( val val -- valval ) bytearray-utf8<|> ;

method: to-string ( self -- str )

#fixnum: to-string self   fixnum>utf8 ;

#array: to-string 
    s" { " self [ to-string string<|> s"  " string<|> ] each s" }" string<|> ;

: println ( obj -- ) to-string (println) ;
type: curry obj quot ;
#curry: call self [ obj>> ] [ quot>> ] bi call ;
#quotation: call self (call) ;

: curry ( obj callable -- curried ) #curry new-boa ;

type: vec3 x y z ; 

: vec3+ ( v1 v2 -- v1+v2 ) 
    [ obj>array ] bi@  zip [ first2 + ] map #vec3 array>obj ;

: vec3* ( vec scalar -- scaled )
    [ * ] curry [ obj>array ] dip map #vec3 array>obj ;

#vec3: + self vec3+ ;
#vec3: * self swap vec3* ;
#vec3: to-string
    s" vec3[ " self obj>array [ to-string string<|> s"  " string<|> ] each s" ]" string<|> ;

1 2 3 #vec3 new-boa 4 3 2 #vec3 new-boa + println
1 2 3 #vec3 new-boa 10 swap * println

: scale-by ( sequence factor -- scaled ) [ * ] curry map ;
: add ( sequence value -- added ) [ + ] curry map ;

{ 1 2 5 2 } 10 scale-by 1 add println
